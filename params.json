{"name":"Span-skip-list","tagline":"A data structure for computing running totals in arbitrary dimensions in O(ln(n))","body":"# Span Skip-List [![Build Status](https://travis-ci.org/atom/span-skip-list.png)](https://travis-ci.org/atom/span-skip-list)\r\n\r\nThis data structure stores arbitrary mappings between various dimensions and\r\nallows running totals to be calculated in O(ln(n)), where n is the number of\r\ntable entries. Say you have a table entries like the following:\r\n\r\n| x | y |\r\n|---|---|\r\n| 3 | 3 |\r\n| 5 | 2 |\r\n| 2 | 7 |\r\n| 4 | 4 |\r\n\r\nWith this data structure, you can determine how many y's you have traversed when\r\nyou've traversed up to a certain number of x's. For example, when you've\r\ntraversed up to 8 in the x dimension your total in the y dimension is 5. Here's\r\nan example of how you'd use the span skip list to answer that query:\r\n\r\n```coffeescript\r\nSpanSkipList = require 'span-skip-list'\r\n\r\n# Construct with the dimensions you want to track\r\nlist = new SpanSkipList('x', 'y')\r\n\r\n# Populate with entries. Splice takes the dimension in which to interpret the\r\n# index as a first argument. More on that later.\r\nentries = [\r\n  {x: 3, y: 3}\r\n  {x: 5, y: 2}\r\n  {x: 2, y: 7}\r\n  {x: 4, y: 4}\r\n]\r\nlist.splice('x', 0, 0, entries...)\r\nlist.getElements() # => [{x: 3, y: 3} {x: 5, y: 2} {x: 2, y: 7} {x: 4, y: 4}]\r\n\r\n# Call ::totalTo with a total in one dimension to get a total in all dimensions\r\n# up to the element that exceeds the target value in that dimension.\r\nlist.totalTo(8, 'x') # => { x: 8, y: 5 }\r\nlist.totalTo(10, 'x') # => { x: 10, y: 12 }\r\n\r\n# Note that you always get the total exclusive of the exceeding element. In this\r\n# case, x = 11 returns the same total as x = 10 because including the next\r\n# element ({x: 4, y: 4} would make x = 14, which exceeds x = 11.\r\nlist.totalTo(11, 'x') # => { x: 10, y: 12 }\r\n\r\n# The splice occurs at the index of the first element that exceeds the given\r\n# index in the given dimension. In this case, the splice at x = 3 replaces the\r\n# element {x: 5, y: 2} with the given element. The ::splice method returns an\r\n# array of removed elements, list like Array::splice.\r\nlist.splice('x', 3, 1, {x: 7, y: 1}) # => [{x: 5, y: 2}]\r\nlist.getElements() # => [{x: 3, y: 3}, {x: 7, y: 1}, {x: 2, y: 7}, {x: 4, y: 4}]\r\n\r\n# You can splice in any tracked dimension:\r\nlist.splice('y', 4, 0, {x: 2, y: 2})\r\nlist.getElements() # => [{x: 3, y: 3}, {x: 7, y: 1}, {x: 2, y: 2}, {x: 2, y: 7}, {x: 4, y: 4}]\r\n\r\n# You can also splice and run totals in the special 'elements' dimension, which\r\n# counts each element as a unit. This returns the total of the first 3 elements:\r\nlist.totalTo(3, 'elements') # => {x: 12, y: 6}\r\n\r\n# And this splices at the given element index:\r\nlist.splice('elements', 2, 1) # => [{x: 2, y: 2}]\r\nlist.getElements() # => [{x: 3, y: 3}, {x: 7, y: 1}, {x: 2, y: 7}, {x: 4, y: 4}]\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}